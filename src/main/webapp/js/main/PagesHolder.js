/**
 * Copyright (C) Edeqa <http://www.edeqa.com>
 *
 * Created 3/7/18.

 * !!! IMPORTANT !!!
 * DO NOT EDIT THIS FILE
 * !!! IMPORTANT !!!
 */

function PagesHolder(main) {
    var self = this;
    var u = main.edequate;

    this.category = DRAWER.SECTION_PRIMARY;
    this.type = "$pages";
    this.origin = [];
    this.pages = null;
    this.isInstalled = false;
    this.currentType = null;
    this.preventHistory = true;
    this.preventState = true;


    this.start = function () {
        console.log("Starting PagesHolder");
        setUpPages();
    };

    this.resume = function (type) {
        u.progress.show(u.lang.loading);
        if (type) {
            this.currentType = type;
        } else {
            type = this.currentType;
        }
        processPage(type);
    };

    this.onEvent = function (event) {
        switch (event) {
            case "loaded":
                setUpPages();
                break;
        }
    };

    function setUpPages() {
        try {
            if (!main.structure) return;
            if (self.isInstalled) return;
            for(var i in main.structure.categories) {
                if(main.structure.categories[i].pages) {
                    for(var j in main.structure.categories[i].pages) {
                        var page = main.structure.categories[i].pages[j];
                        var icon = page.icon;
                        if (icon && icon.split("/").length > 1) {
                            icon = u.create(HTML.IMG, {
                                src: icon,
                                className: "icon drawer-menu-item-icon"
                            })
                        }
                        if (page.menu && !main.drawer.items[page.type]) {
                            page.drawerItem = main.drawer.add({
                                section: i,
                                id: page.type,
                                name: u.lang[page.menu] || page.menu,
                                icon: icon,
                                priority: page.priority,
                                callback: function () {
                                    main.holder = self;
                                    main.drawer.toggleSize(false);
                                    main.actionbar.toggleSize(false);

                                    main.content.scrollTop = 0;

                                    main.drawer.close();
                                    window.history.pushState({}, null, "/" + main.mainType + "/" + this.type);
                                    self.resume(this.type);
                                    return false;
                                }.bind(page)
                            });
                        }
                    }
                }
            }
        } catch (e) {
            console.error(e);
        }
    }

    function processPage(type) {
        try {
            var page = null;
            for(var i in main.structure.categories) {
                for(var j in main.structure.categories[i].pages) {
                    if(main.structure.categories[i].pages[j].type === type) {
                        page = main.structure.categories[i].pages[j];
                        break;
                    }
                }
            }
            if (!page) {
                console.error("Page not found:", type);
                main.holder = u.eventBus.holders[404];
                // main.turn(404, type);
                if (main.holder) {
                    if (type) {
                        main.holder.resume(type);
                    } else {
                        main.holder.resume();
                    }
                    main.actionbar.setTitle(main.holder.title);
                    u.lang.updateNode(main.drawer.headerPrimary, main.holder.title);
                } else {
                    window.location = "/";
                }
                return;
            }
            u.post("/rest/content", {
                resource: page.resource,
                locale: main.selectLang.value
            }).then(function (xhr) {
                u.clear(main.content);

                var content = xhr.response;
                var head = content.match(/<head>([\s\S]+?)<\/head>/);
                if(head) {
                    head = head[1];
                    content = content.replace(/<head>[\s\S]+?<\/head>/, "");
                    var temp = u.create(HTML.DIV);
                    temp.innerHTML = head;
                    while (temp.firstChild) {
                        if(temp.firstChild.nodeName !== "#text" && temp.firstChild.nodeName !== "#comment") {
                            u.create(temp.firstChild.nodeName, {
                                innerHTML: temp.firstChild.innerHTML,
                                src: temp.firstChild.src,
                                onload: temp.firstChild.onload,
                                rel: temp.firstChild.rel,
                                href: temp.firstChild.href,
                                name: temp.firstChild.name,
                                async: temp.firstChild.async
                            }, document.head);
                        }
                        temp.firstChild.parentNode.removeChild(temp.firstChild);
                    }
                }
                u.create(HTML.DIV, {
                    className: "content-normal",
                    innerHTML: content
                }, main.content);
                main.eventBus.fire("pages_done", type);
                u.progress.hide();
            }).catch(function (error, json) {
                console.error(json);
                u.clear(main.content);
                u.create(HTML.DIV, {
                    className: "content-centered",
                    innerHTML: u.lang.error || "Error"
                }, main.content);
                main.eventBus.fire("pages_done", type);
                u.progress.hide();
            });
            window.history.pushState({}, null, "/" + main.mainType + "/" + type);
            main.history.add(self.type, [type]);
            main.actionbar.setTitle(u.lang[page.title] || page.title);
            u.lang.updateNode(main.drawer.headerPrimary, u.lang[page.title] || page.title);
        } catch (e) {
            console.error(e);
        }
    }

}