/**
 * Edequate. Copyright (C) 2017-18 Edeqa <http://www.edeqa.com>
 *
 * Created 12/27/17.
 *
 * !!! IMPORTANT !!!
 * DO NOT EDIT THIS FILE
 * !!! IMPORTANT !!!
 */

function Main(u) {
    var self = this;
    window.Main = this;
    this.edequate = u;

    this.start = function(arguments) {
        self.arguments = arguments = arguments || {};

        var info = arguments.info;
        self.mainType = arguments.type || "main";
        self.eventBus = u.eventBus;

        self.history = new HoldersHistory(self.mainType);
        window.addEventListener("popstate", function() {
            self.history.goBack();
        });

        if (arguments.serviceWorker && "serviceWorker" in navigator) {
            window.addEventListener("load", function() {
                navigator.serviceWorker.register(arguments.serviceWorker).then(function(registration) {
                    console.log("ServiceWorker registration successful with scope:", registration);
                }).catch(function(err) {
                    if(err.code === 18) {
                        console.warn(err);
                        return;
                    }
                    console.error("ServiceWorker registration failed:", err);
                    throw new Error("ServiceWorker error:",err);
                });
            });
        }

        var collapsed = u.load("drawer:collapsed");
        self.layout = self.content = u.create(HTML.DIV, {className:"layout changeable" + (collapsed ? " collapsed" : ""), role:"main", onscroll: switchFullDrawer}, document.body);
        window.addEventListener("scroll", switchFullDrawer);
        // self.content = u.create(HTML.DIV, {className:"content", onscroll: switchFullDrawer}, self.layout);

        self.actionbar = u.actionBar({
            title: "Loading...",
            onbuttonclick: function(){
                try {
                    self.drawer.open();
                } catch(e) {
                    console.error(e);
                }
            }
        }, document.body);

        self.selectLang = u.create(HTML.SELECT, { className: "actionbar-select-lang changeable", value: u.load("lang"), onchange: function() {
                var lang = (this.value || navigator.language).toLowerCase().slice(0,2);
                u.save("lang", lang);
                self.loadResources(self.mainType + ".json");
                self.holder.resume();
            }}, self.actionbar).place(HTML.OPTION, { name: u.lang.loading, value:"" });

        u.require({src:"/rest/locales",isJSON:true}, function(json){
            console.log("locales", json.message);
            u.clear(self.selectLang);
            var count = 1;
            self.selectLang.place(HTML.OPTION, { innerHTML: "Default", value: "en" });
            for(var x in json.message) {
                // noinspection JSUnfilteredForInLoop
                self.selectLang.place(HTML.OPTION, { innerHTML: json.message[x], value: x });
                if(u.load("lang") === x) self.selectLang.selectedIndex = count;
                count++;
            }
        });

        this.turn = function(holderType, options) {
            self.content.scrollTop = 0;
            switchFullDrawer.call(self.content);

            self.drawer.close();
            if(self.eventBus.holders[holderType]) {
                self.holder = self.eventBus.holders[holderType];
                /** @namespace self.holder.preventState */
                if(!self.holder.preventHistory) {
                    window.history.pushState({}, null, "/" + self.mainType + "/" + holderType);
                }
            } else {
                console.log("Passing '" + holderType + "' to PagesHolder");
                self.holder = self.eventBus.holders["$pages"];//[404];
                options = [holderType].concat(options)
                // options = [holderType];
            }

            if(self.holder && self.holder.resume) {
                if(options && options instanceof Array && options.length > 0) {
                    self.holder.resume.apply(self.holder, options);
                } else if(options && options.constructor === String) {
                    self.holder.resume(options);
                } else {
                    self.holder.resume();
                }
                if(!self.holder.preventHistory) {
                    self.history.add(holderType, options);
                }
                if(!self.holder.preventState) {
                    self.actionbar.setTitle(self.holder.title);
                    u.lang.updateNode(self.drawer.headerPrimary, self.holder.title);
                }
            } else {
                window.location = "/";
            }
            window.addEventListener("load",function() { setTimeout(function(){
                window.scrollTo(0, 1); }, 0);
            });
            self.eventBus.fire("turn", self.holder);
        };

        this.loadResources(self.mainType + ".json", function() {
            var dialogAbout = u.dialog({
                className: "about-dialog",
                items: [
                    { innerHTML: "Edequate" },
                    { innerHTML: "&nbsp;" },
                    { content: [
                            u.create(HTML.IMG, {src: "/images/edeqa-logo.svg", className: "about-dialog-edeqa-logo"}),
                            u.create(HTML.DIV)
                                .place(HTML.DIV, { innerHTML: "Copyright &copy;2017-18 Edeqa" })
                                .place(HTML.A, {className: "about-dialog-edeqa-link", href: "http://www.edeqa.com", target: "_blank", rel:"noopener", innerHTML: "http://www.edeqa.com" })
                        ]},
                    {
                        enclosed: true,
                        label: u.lang.legal_information || "Legal information",
                        body: u.lang.loading && u.lang.loading.outerHTML || "Loading...",
                        className: "dialog-about-terms",
                        onopen: function(e) {
                            var lang = (u.load("lang") || navigator.language).toLowerCase().slice(0,2);
                            u.post("/rest/content", {resource: "legal-information.html", locale: lang}).then(function(xhr){
                                e.body.innerHTML = xhr.response;
                            }).catch(function(error, json) {
                                console.error(error, json);
                                e.body.innerHTML = u.lang.error;
                            });
                        }
                    }
                ],
                positive: {
                    label: u.lang.ok
                }
            });

            u.require([{src:"/rest/" + self.mainType, isJSON:true}, {src:"/rest/data", isJSON: true, body: {resource: "pages-" + self.mainType + ".json"}}], function(json, jsonStructure){

                self.structure = self.buildTree(jsonStructure);
                if(self.structure.title) {
                    document.title = u.lang[self.structure.title] || self.structure.title || u.lang.title;
                }
                self.drawer = new u.drawer({
                    title: u.lang[self.structure.title] || self.structure.title || u.lang.title || "Edequate",
                    // collapsed: u.load("drawer:collapsed"),
                    flexible: true,
                    logo: {
                        src: "/images/logo.svg"
                    },
                    onprimaryclick: function(){
                        console.log("onprimaryclick");
                    },
                    footer: {
                        className: "drawer-footer-label",
                        content: u.create(HTML.DIV, { className: "drawer-footer-link", innerHTML: u.lang[self.structure.copyright] || self.structure.copyright || "Edequate &copy;2017-18 Edeqa", onclick: function(e){
                                dialogAbout.open();
                                e.stopPropagation();
                            }})
                    },
                    sections: self.structure.categories,
                    ontogglesize: function(collapsed) {
                        if(collapsed !== undefined) self.layout.classList[collapsed ? "add":"remove"]("collapsed");
                    }
                }, document.body);

                for(var i in json.message) {
                    // noinspection JSUnfilteredForInLoop
                    /** @namespace json.extra */
                    json.message[i] = json.extra + "/" + json.message[i];
                }
                if(json.message.indexOf("/js/main/PagesHolder.js") < 0) {
                    json.message.push("/js/main/PagesHolder.js");
                }
                if(json.message.indexOf("/js/main/PageNotFoundHolder.js") < 0) {
                    json.message.push("/js/main/PageNotFoundHolder.js");
                }
                self.eventBus.register(json.message, {
                    context: self,
                    onprogress: function (loaded) {
                        u.byId("loading-dialog-progress").innerHTML = Math.ceil(loaded / json.message.length * 100) + "%";
                    },
                    onstart: function () {
                        console.log("Holders started:", self.eventBus.holders);
                    },
                    onsuccess: function () {
                        self.eventBus.fire("loaded");
                        for(var x in self.eventBus.holders) {
                            var holder = self.eventBus.holders[x];
                            if(holder.menu) {
                                self.drawer.add({section: holder.category, id: holder.type, name: holder.menu, icon: holder.icon, priority: holder.priority, callback: function(){
                                        self.turn(this.type);
                                        return false;
                                    }.bind(holder)});
                            }
                        }

                        if(info) {
                            self.content.innerHTML = info;
                            self.actionbar.setTitle(u.lang.info);
                            u.byId("loading-dialog").hide();
                        } else {
                            var urlPath = new URL(window.location);
                            var path = urlPath.path.split("/");

                            // remove the first element if it is empty
                            if(path.length > 0 && !path[0]) {
                                path.shift();
                            }

                            urlPath = path.join("/").toLowerCase();
                            while(!self.eventBus.holders[urlPath] && path.length > 0) {
                                path.shift();
                                urlPath = path.join("/").toLowerCase();
                            }
                            urlPath = urlPath || "home";
                            self.turn(urlPath, path);
                        }
                        u.byId("loading-dialog").hide();
                    },
                    onerror: function (code, origin, error) {
                        console.error(code, origin, error);
                    }
                });
            });

            // noinspection JSUnusedGlobalSymbols
            // self.content = u.create(HTML.DIV, {className:"content", onscroll: switchFullDrawer}, self.layout);

        });
        self.buttonScrollTop = u.create(HTML.BUTTON, {
            className: "icon button-scroll-top button-flat changeable hidden notranslate blinking",
            onclick: function() {
                document.documentElement.scrollTop = 0;
                self.layout.scrollTop = 0;
                self.content.scrollTop = 0;
                switchFullDrawer.call(self.content);
            },
            innerHTML: "keyboard_arrow_up"
        }, document.body);
    };

    this.loadResources = function(resource, callback) {
        var lang = (u.load("lang") || navigator.language).toLowerCase().slice(0,2);
        u.lang.overrideResources({
            resources: "/rest/resources",
            resource: ["common.json", resource],
            locale: lang,
            callback: callback
        });
    };

    function HoldersHistory(type) {
        var history = u.load("history:" + type) || [];

        this.add = function(holderType, options) {
            var previousState = history[history.length - 1] || {};
            var newState = {h: holderType, o:options};

            if(JSON.stringify(newState) !== JSON.stringify(previousState)) {
                history.push(newState);
                while(history.length > 100) {
                    history.shift();
                }
                u.save("history:" + type, history);
            }
        };

        this.goBack = function() {
            history.pop();
            var state = history.pop();
            if(state) {
                self.turn(state.h, state.o);
            }
        };

        this.clear = function() {
            history = [];
            u.save("history:" + type);
        }
    }

    function switchFullDrawer(){
        if(getComputedStyle(self.actionbar).display === "none") return;
        if(document.documentElement.scrollTop > 10 || self.layout.scrollTop > 0) {
            if(!self.drawer.classList.contains("collapsed")) {
                self.drawer.toggleSize(true);
                self.actionbar.toggleSize(true);
                self.layout.classList.add("collapsed");
            }
            clearTimeout(self.buttonScrollTop.hideTimeout);
            self.buttonScrollTop.hideTimeout = setTimeout(function(){
                self.buttonScrollTop.hide(/*HIDING.OPACITY*/);
            }, 1500);
            if(self.buttonScrollTop.isHidden) self.buttonScrollTop.show(/*HIDING.OPACITY*/);
        } else {
            if(self.drawer.classList.contains("collapsed")) {
                self.drawer.toggleSize(false);
                self.actionbar.toggleSize(false);
                self.layout.classList.remove("collapsed");
            }
            if(!self.buttonScrollTop.isHidden) self.buttonScrollTop.hide(/*HIDING.OPACITY*/);
        }
    }

    this.buildTree = function(json) {
        var categories = [
            {category: 0, title: u.lang.drawer_primary},
            {category: 1, title: u.lang.drawer_summary},
            {category: 2, title: u.lang.drawer_main},
            {category: 3, title: u.lang.drawer_explore},
            {category: 4, title: u.lang.drawer_share},
            {category: 5, title: u.lang.drawer_resources},
            {category: 6, title: u.lang.drawer_miscellaneous},
            {category: 7, title: u.lang.drawer_settings},
            {category: 8, title: u.lang.drawer_help},
            {category: 9, title: u.lang.drawer_last},
            {category: 10, title: u.create(HTML.SPAN, {innerHTML: "[out of menu]", dataLang: "out_of_menu"})}
        ];
        for(var x in json.categories) {
            if(json.categories[x].title) {
                json.categories[x].title = u.lang[json.categories[x].title] || u.create(HTML.SPAN, {dataLang: json.categories[x].title, innerHTML:json.categories[x].title});
            } else {
                json.categories[x].title = categories[json.categories[x].category].title;
            }
            categories[json.categories[x].category] = json.categories[x];
        }
        json.categories = categories;
        return json;
    }

}